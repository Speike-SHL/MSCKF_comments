.TH "md__home_speike__v_s_l_a_m__m_s_c_k_f_vio_ws_src__m_s_c_k_f_comments__r_e_a_d_m_e" 3 "2024年 五月 9日 星期四" "S-MSCKF注释" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md__home_speike__v_s_l_a_m__m_s_c_k_f_vio_ws_src__m_s_c_k_f_comments__r_e_a_d_m_e \- MSCKF_VIO 
The \fCMSCKF_VIO\fP package is a stereo version of MSCKF\&. The software takes in synchronized stereo images and IMU messages and generates real-time 6DOF pose estimation of the IMU frame\&.
.PP
The software is tested on Ubuntu 16\&.04 with ROS Kinetic\&.
.PP
Video: \fChttps://www\&.youtube\&.com/watch?v=jxfJFgzmNSw&t\fP
.br
 Paper Draft: \fChttps://arxiv\&.org/abs/1712\&.00036\fP
.SH "License"
.PP
Penn Software License\&. See \fBLICENSE\&.txt\fP for further details\&.
.SH "Dependencies"
.PP
Most of the dependencies are standard including \fCEigen\fP, \fCOpenCV\fP, and \fCBoost\fP\&. The standard shipment from Ubuntu 16\&.04 and ROS Kinetic works fine\&. One special requirement is \fCsuitesparse\fP, which can be installed through,
.PP
.PP
.nf
sudo apt-get install libsuitesparse-dev
.fi
.PP
.SH "Compling"
.PP
The software is a standard catkin package\&. Make sure the package is on \fCROS_PACKAGE_PATH\fP after cloning the package to your workspace\&. And the normal procedure for compiling a catkin package should work\&.
.PP
.PP
.nf
cd your_work_space
catkin_make --pkg msckf_vio --cmake-args -DCMAKE_BUILD_TYPE=Release
.fi
.PP
.SH "Calibration"
.PP
An accurate calibration is crucial for successfully running the software\&. To get the best performance of the software, the stereo cameras and IMU should be hardware synchronized\&. Note that for the stereo calibration, which includes the camera intrinsics, distortion, and extrinsics between the two cameras, you have to use a calibration software\&. \fBManually setting these parameters will not be accurate enough\&.\fP \fCKalibr\fP can be used for the stereo calibration and also to get the transformation between the stereo cameras and IMU\&. The yaml file generated by Kalibr can be directly used in this software\&. See calibration files in the \fCconfig\fP folder for details\&. The two calibration files in the \fCconfig\fP folder should work directly with the EuRoC and \fCfast flight\fP datasets\&. The convention of the calibration file is as follows:
.PP
\fCcamx/T_cam_imu\fP: takes a vector from the IMU frame to the camx frame\&. \fCcam1/T_cn_cnm1\fP: takes a vector from the cam0 frame to the cam1 frame\&.
.PP
The filter uses the first 200 IMU messages to initialize the gyro bias, acc bias, and initial orientation\&. Therefore, the robot is required to start from a stationary state in order to initialize the VIO successfully\&.
.SH "EuRoC and UPenn Fast flight dataset example usage"
.PP
First obtain either the \fCEuRoC\fP or the \fCUPenn fast flight\fP dataset\&.
.PP
Recommended EuRoC ROS Bags:
.IP "\(bu" 2
\fCVicon Room 1 01\fP
.IP "\(bu" 2
\fCVicon Room 1 02\fP
.PP
.PP
Once the \fC\fBmsckf_vio\fP\fP is built and sourced (via \fCsource <path to catkin_ws>/devel/setup\&.bash\fP), there are two launch files prepared for the \fCEuRoC\fP and \fCUPenn fast flight\fP dataset named \fCmsckf_vio_euroc\&.launch\fP and \fCmsckf_vio_fla\&.launch\fP respectively\&. Each launch files instantiates two ROS nodes:
.PP
.IP "\(bu" 2
\fCimage_processor\fP processes stereo images to detect and track features
.IP "\(bu" 2
\fCvio\fP obtains feature measurements from the \fCimage_processor\fP and tightly fuses them with the IMU messages to estimate pose\&.
.PP
.PP
These launch files can be executed via
.PP
.PP
.nf
roslaunch msckf_vio msckf_vio_euroc\&.launch
.fi
.PP
.PP
or
.PP
.PP
.nf
roslaunch msckf_vio msckf_vio_fla\&.launch
.fi
.PP
.PP
Once the nodes are running you need to run the dataset rosbags (in a different terminal), for example:
.PP
.PP
.nf
rosbag play V1_01_easy\&.bag
.fi
.PP
.PP
As mentioned in the previous section, \fBThe robot is required to start from a stationary state in order to initialize the VIO successfully\&.\fP
.PP
To visualize the pose and feature estimates you can use the provided rviz configurations found in \fCmsckf_vio/rviz\fP folder (EuRoC: \fCrviz_euroc_config\&.rviz\fP, Fast dataset: \fCrviz_fla_config\&.rviz\fP)\&.
.SH "ROS Nodes"
.PP
.SS "<tt>image_processor</tt> node"
\fBSubscribed Topics\fP
.PP
\fCimu\fP (\fCsensor_msgs/Imu\fP)
.PP
IMU messages is used for compensating rotation in feature tracking, and 2-point RANSAC\&.
.PP
\fCcam[x]_image\fP (\fCsensor_msgs/Image\fP)
.PP
Synchronized stereo images\&.
.PP
\fBPublished Topics\fP
.PP
\fCfeatures\fP (\fCmsckf_vio/CameraMeasurement\fP)
.PP
Records the feature measurements on the current stereo image pair\&.
.PP
\fCtracking_info\fP (\fCmsckf_vio/TrackingInfo\fP)
.PP
Records the feature tracking status for debugging purpose\&.
.PP
\fCdebug_stereo_img\fP (\fCsensor_msgs::Image\fP)
.PP
Draw current features on the stereo images for debugging purpose\&. Note that this debugging image is only generated upon subscription\&.
.SS "<tt>vio</tt> node"
\fBSubscribed Topics\fP
.PP
\fCimu\fP (\fCsensor_msgs/Imu\fP)
.PP
IMU measurements\&.
.PP
\fCfeatures\fP (\fCmsckf_vio/CameraMeasurement\fP)
.PP
Stereo feature measurements from the \fCimage_processor\fP node\&.
.PP
\fBPublished Topics\fP
.PP
\fCodom\fP (\fCnav_msgs/Odometry\fP)
.PP
Odometry of the IMU frame including a proper covariance\&.
.PP
\fCfeature_point_cloud\fP (\fCsensor_msgs/PointCloud2\fP)
.PP
Shows current features in the map which is used for estimation\&. 
